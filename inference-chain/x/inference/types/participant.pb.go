// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: inference/inference/participant.proto

package types

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ParticipantStatus int32

const (
	ParticipantStatus_UNSPECIFIED ParticipantStatus = 0
	ParticipantStatus_ACTIVE      ParticipantStatus = 1
	ParticipantStatus_INACTIVE    ParticipantStatus = 2
	ParticipantStatus_INVALID     ParticipantStatus = 3
	ParticipantStatus_RAMPING     ParticipantStatus = 4
)

var ParticipantStatus_name = map[int32]string{
	0: "UNSPECIFIED",
	1: "ACTIVE",
	2: "INACTIVE",
	3: "INVALID",
	4: "RAMPING",
}

var ParticipantStatus_value = map[string]int32{
	"UNSPECIFIED": 0,
	"ACTIVE":      1,
	"INACTIVE":    2,
	"INVALID":     3,
	"RAMPING":     4,
}

func (x ParticipantStatus) String() string {
	return proto.EnumName(ParticipantStatus_name, int32(x))
}

func (ParticipantStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_d2bc555767052d80, []int{0}
}

type Participant struct {
	Index                        string            `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
	Address                      string            `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	Weight                       int32             `protobuf:"varint,3,opt,name=weight,proto3" json:"weight,omitempty"`
	JoinTime                     int64             `protobuf:"varint,4,opt,name=join_time,json=joinTime,proto3" json:"join_time,omitempty"`
	JoinHeight                   int64             `protobuf:"varint,5,opt,name=join_height,json=joinHeight,proto3" json:"join_height,omitempty"`
	LastInferenceTime            int64             `protobuf:"varint,6,opt,name=last_inference_time,json=lastInferenceTime,proto3" json:"last_inference_time,omitempty"`
	InferenceUrl                 string            `protobuf:"bytes,7,opt,name=inference_url,json=inferenceUrl,proto3" json:"inference_url,omitempty"`
	Models                       []string          `protobuf:"bytes,8,rep,name=models,proto3" json:"models,omitempty"`
	Status                       ParticipantStatus `protobuf:"varint,9,opt,name=status,proto3,enum=inference.inference.ParticipantStatus" json:"status,omitempty"`
	InferenceCount               uint64            `protobuf:"varint,10,opt,name=inference_count,json=inferenceCount,proto3" json:"inference_count,omitempty"`
	ValidatedInferences          uint64            `protobuf:"varint,11,opt,name=validated_inferences,json=validatedInferences,proto3" json:"validated_inferences,omitempty"`
	InvalidatedInferences        uint64            `protobuf:"varint,12,opt,name=invalidated_inferences,json=invalidatedInferences,proto3" json:"invalidated_inferences,omitempty"`
	CoinBalance                  int64             `protobuf:"varint,13,opt,name=coin_balance,json=coinBalance,proto3" json:"coin_balance,omitempty"`
	ValidatorKey                 string            `protobuf:"bytes,14,opt,name=validator_key,json=validatorKey,proto3" json:"validator_key,omitempty"`
	ConsecutiveInvalidInferences int64             `protobuf:"varint,15,opt,name=consecutive_invalid_inferences,json=consecutiveInvalidInferences,proto3" json:"consecutive_invalid_inferences,omitempty"`
	WorkerPublicKey              string            `protobuf:"bytes,16,opt,name=worker_public_key,json=workerPublicKey,proto3" json:"worker_public_key,omitempty"`
	EpochsCompleted              uint32            `protobuf:"varint,17,opt,name=epochs_completed,json=epochsCompleted,proto3" json:"epochs_completed,omitempty"`
}

func (m *Participant) Reset()         { *m = Participant{} }
func (m *Participant) String() string { return proto.CompactTextString(m) }
func (*Participant) ProtoMessage()    {}
func (*Participant) Descriptor() ([]byte, []int) {
	return fileDescriptor_d2bc555767052d80, []int{0}
}
func (m *Participant) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Participant) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Participant.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Participant) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Participant.Merge(m, src)
}
func (m *Participant) XXX_Size() int {
	return m.Size()
}
func (m *Participant) XXX_DiscardUnknown() {
	xxx_messageInfo_Participant.DiscardUnknown(m)
}

var xxx_messageInfo_Participant proto.InternalMessageInfo

func (m *Participant) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

func (m *Participant) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *Participant) GetWeight() int32 {
	if m != nil {
		return m.Weight
	}
	return 0
}

func (m *Participant) GetJoinTime() int64 {
	if m != nil {
		return m.JoinTime
	}
	return 0
}

func (m *Participant) GetJoinHeight() int64 {
	if m != nil {
		return m.JoinHeight
	}
	return 0
}

func (m *Participant) GetLastInferenceTime() int64 {
	if m != nil {
		return m.LastInferenceTime
	}
	return 0
}

func (m *Participant) GetInferenceUrl() string {
	if m != nil {
		return m.InferenceUrl
	}
	return ""
}

func (m *Participant) GetModels() []string {
	if m != nil {
		return m.Models
	}
	return nil
}

func (m *Participant) GetStatus() ParticipantStatus {
	if m != nil {
		return m.Status
	}
	return ParticipantStatus_UNSPECIFIED
}

func (m *Participant) GetInferenceCount() uint64 {
	if m != nil {
		return m.InferenceCount
	}
	return 0
}

func (m *Participant) GetValidatedInferences() uint64 {
	if m != nil {
		return m.ValidatedInferences
	}
	return 0
}

func (m *Participant) GetInvalidatedInferences() uint64 {
	if m != nil {
		return m.InvalidatedInferences
	}
	return 0
}

func (m *Participant) GetCoinBalance() int64 {
	if m != nil {
		return m.CoinBalance
	}
	return 0
}

func (m *Participant) GetValidatorKey() string {
	if m != nil {
		return m.ValidatorKey
	}
	return ""
}

func (m *Participant) GetConsecutiveInvalidInferences() int64 {
	if m != nil {
		return m.ConsecutiveInvalidInferences
	}
	return 0
}

func (m *Participant) GetWorkerPublicKey() string {
	if m != nil {
		return m.WorkerPublicKey
	}
	return ""
}

func (m *Participant) GetEpochsCompleted() uint32 {
	if m != nil {
		return m.EpochsCompleted
	}
	return 0
}

func init() {
	proto.RegisterEnum("inference.inference.ParticipantStatus", ParticipantStatus_name, ParticipantStatus_value)
	proto.RegisterType((*Participant)(nil), "inference.inference.Participant")
}

func init() {
	proto.RegisterFile("inference/inference/participant.proto", fileDescriptor_d2bc555767052d80)
}

var fileDescriptor_d2bc555767052d80 = []byte{
	// 553 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x93, 0xcd, 0x6e, 0xd3, 0x40,
	0x14, 0x85, 0xe3, 0xa6, 0x49, 0x9b, 0xeb, 0xb4, 0x71, 0xa6, 0xa5, 0x1a, 0x09, 0x64, 0x0c, 0x08,
	0x30, 0x5d, 0xb8, 0x02, 0xd4, 0x2d, 0x52, 0x9b, 0x16, 0xb0, 0x80, 0x10, 0xb9, 0x3f, 0x42, 0x6c,
	0x2c, 0x67, 0x3c, 0x34, 0x43, 0x1d, 0x8f, 0xe5, 0x19, 0xf7, 0xe7, 0x2d, 0x78, 0x1c, 0x1e, 0x81,
	0x65, 0x97, 0x2c, 0x51, 0xf3, 0x22, 0xc8, 0x63, 0xc7, 0xb1, 0xa0, 0xbb, 0xb9, 0xdf, 0x39, 0x67,
	0xee, 0xf5, 0xb5, 0x06, 0x9e, 0xb2, 0xf8, 0x1b, 0x4d, 0x69, 0x4c, 0xe8, 0xce, 0xe2, 0x94, 0x04,
	0xa9, 0x64, 0x84, 0x25, 0x41, 0x2c, 0x9d, 0x24, 0xe5, 0x92, 0xa3, 0x8d, 0x4a, 0x74, 0xaa, 0xd3,
	0xe3, 0x9f, 0x2d, 0xd0, 0x47, 0x0b, 0x2b, 0xda, 0x84, 0x16, 0x8b, 0x43, 0x7a, 0x85, 0x35, 0x4b,
	0xb3, 0x3b, 0x5e, 0x51, 0x20, 0x0c, 0x2b, 0x41, 0x18, 0xa6, 0x54, 0x08, 0xbc, 0xa4, 0xf8, 0xbc,
	0x44, 0x5b, 0xd0, 0xbe, 0xa4, 0xec, 0x6c, 0x22, 0x71, 0xd3, 0xd2, 0xec, 0x96, 0x57, 0x56, 0xe8,
	0x3e, 0x74, 0xbe, 0x73, 0x16, 0xfb, 0x92, 0x4d, 0x29, 0x5e, 0xb6, 0x34, 0xbb, 0xe9, 0xad, 0xe6,
	0xe0, 0x98, 0x4d, 0x29, 0x7a, 0x08, 0xba, 0x12, 0x27, 0x45, 0xb2, 0xa5, 0x64, 0xc8, 0xd1, 0xfb,
	0x22, 0xed, 0xc0, 0x46, 0x14, 0x08, 0xe9, 0x57, 0x73, 0x16, 0xf7, 0xb4, 0x95, 0xb1, 0x9f, 0x4b,
	0xee, 0x5c, 0x51, 0x17, 0x3e, 0x81, 0xb5, 0x85, 0x35, 0x4b, 0x23, 0xbc, 0xa2, 0xa6, 0xec, 0x56,
	0xf0, 0x24, 0x8d, 0xf2, 0x51, 0xa7, 0x3c, 0xa4, 0x91, 0xc0, 0xab, 0x56, 0xd3, 0xee, 0x78, 0x65,
	0x85, 0xde, 0x40, 0x5b, 0xc8, 0x40, 0x66, 0x02, 0x77, 0x2c, 0xcd, 0x5e, 0x7f, 0xf5, 0xcc, 0xb9,
	0x63, 0x51, 0x4e, 0x6d, 0x49, 0x47, 0xca, 0xed, 0x95, 0x29, 0xf4, 0x1c, 0x7a, 0x8b, 0xe6, 0x84,
	0x67, 0xb1, 0xc4, 0x60, 0x69, 0xf6, 0xb2, 0xb7, 0x5e, 0xe1, 0x41, 0x4e, 0xd1, 0x4b, 0xd8, 0xbc,
	0x08, 0x22, 0x16, 0x06, 0x92, 0x86, 0x8b, 0x4f, 0x13, 0x58, 0x57, 0xee, 0x8d, 0x4a, 0xab, 0xbe,
	0x4d, 0xa0, 0x5d, 0xd8, 0x62, 0xf1, 0x9d, 0xa1, 0xae, 0x0a, 0xdd, 0xab, 0xa9, 0xb5, 0xd8, 0x23,
	0xe8, 0x92, 0x7c, 0xc1, 0xe3, 0x20, 0x0a, 0x62, 0x42, 0xf1, 0x9a, 0x5a, 0x9c, 0x9e, 0xb3, 0xfd,
	0x02, 0xe5, 0x2b, 0x2b, 0x93, 0x3c, 0xf5, 0xcf, 0xe9, 0x35, 0x5e, 0x2f, 0x56, 0x56, 0xc1, 0x0f,
	0xf4, 0x1a, 0x1d, 0x80, 0x49, 0x78, 0x2c, 0x28, 0xc9, 0x24, 0xbb, 0xa0, 0x7e, 0xd9, 0xac, 0x3e,
	0x46, 0x4f, 0xdd, 0xfc, 0xa0, 0xe6, 0x72, 0x0b, 0x53, 0x6d, 0x9a, 0x6d, 0xe8, 0x5f, 0xf2, 0xf4,
	0x9c, 0xa6, 0x7e, 0x92, 0x8d, 0x23, 0x46, 0x54, 0x3b, 0x43, 0xb5, 0xeb, 0x15, 0xc2, 0x48, 0xf1,
	0xbc, 0xe3, 0x0b, 0x30, 0x68, 0xc2, 0xc9, 0x44, 0xf8, 0x84, 0x4f, 0x93, 0x88, 0x4a, 0x1a, 0xe2,
	0xbe, 0xa5, 0xd9, 0x6b, 0x5e, 0xaf, 0xe0, 0x83, 0x39, 0xde, 0xfe, 0x02, 0xfd, 0xff, 0x7e, 0x0a,
	0xea, 0x81, 0x7e, 0x32, 0x3c, 0x1a, 0x1d, 0x0e, 0xdc, 0xb7, 0xee, 0xe1, 0x81, 0xd1, 0x40, 0x00,
	0xed, 0xbd, 0xc1, 0xb1, 0x7b, 0x7a, 0x68, 0x68, 0xa8, 0x0b, 0xab, 0xee, 0xb0, 0xac, 0x96, 0x90,
	0x0e, 0x2b, 0xee, 0xf0, 0x74, 0xef, 0xa3, 0x7b, 0x60, 0x34, 0xf3, 0xc2, 0xdb, 0xfb, 0x34, 0x72,
	0x87, 0xef, 0x8c, 0xe5, 0xfd, 0xcf, 0xbf, 0x6e, 0x4d, 0xed, 0xe6, 0xd6, 0xd4, 0xfe, 0xdc, 0x9a,
	0xda, 0x8f, 0x99, 0xd9, 0xb8, 0x99, 0x99, 0x8d, 0xdf, 0x33, 0xb3, 0xf1, 0x75, 0xf7, 0x8c, 0xc9,
	0x49, 0x36, 0x76, 0x08, 0x9f, 0xee, 0x24, 0x29, 0x0f, 0x33, 0x22, 0x05, 0x61, 0xff, 0x3c, 0xbd,
	0xab, 0xda, 0x59, 0x5e, 0x27, 0x54, 0x8c, 0xdb, 0xea, 0x05, 0xbe, 0xfe, 0x1b, 0x00, 0x00, 0xff,
	0xff, 0xe8, 0x1a, 0x99, 0x43, 0xaa, 0x03, 0x00, 0x00,
}

func (m *Participant) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Participant) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Participant) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.EpochsCompleted != 0 {
		i = encodeVarintParticipant(dAtA, i, uint64(m.EpochsCompleted))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x88
	}
	if len(m.WorkerPublicKey) > 0 {
		i -= len(m.WorkerPublicKey)
		copy(dAtA[i:], m.WorkerPublicKey)
		i = encodeVarintParticipant(dAtA, i, uint64(len(m.WorkerPublicKey)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if m.ConsecutiveInvalidInferences != 0 {
		i = encodeVarintParticipant(dAtA, i, uint64(m.ConsecutiveInvalidInferences))
		i--
		dAtA[i] = 0x78
	}
	if len(m.ValidatorKey) > 0 {
		i -= len(m.ValidatorKey)
		copy(dAtA[i:], m.ValidatorKey)
		i = encodeVarintParticipant(dAtA, i, uint64(len(m.ValidatorKey)))
		i--
		dAtA[i] = 0x72
	}
	if m.CoinBalance != 0 {
		i = encodeVarintParticipant(dAtA, i, uint64(m.CoinBalance))
		i--
		dAtA[i] = 0x68
	}
	if m.InvalidatedInferences != 0 {
		i = encodeVarintParticipant(dAtA, i, uint64(m.InvalidatedInferences))
		i--
		dAtA[i] = 0x60
	}
	if m.ValidatedInferences != 0 {
		i = encodeVarintParticipant(dAtA, i, uint64(m.ValidatedInferences))
		i--
		dAtA[i] = 0x58
	}
	if m.InferenceCount != 0 {
		i = encodeVarintParticipant(dAtA, i, uint64(m.InferenceCount))
		i--
		dAtA[i] = 0x50
	}
	if m.Status != 0 {
		i = encodeVarintParticipant(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x48
	}
	if len(m.Models) > 0 {
		for iNdEx := len(m.Models) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Models[iNdEx])
			copy(dAtA[i:], m.Models[iNdEx])
			i = encodeVarintParticipant(dAtA, i, uint64(len(m.Models[iNdEx])))
			i--
			dAtA[i] = 0x42
		}
	}
	if len(m.InferenceUrl) > 0 {
		i -= len(m.InferenceUrl)
		copy(dAtA[i:], m.InferenceUrl)
		i = encodeVarintParticipant(dAtA, i, uint64(len(m.InferenceUrl)))
		i--
		dAtA[i] = 0x3a
	}
	if m.LastInferenceTime != 0 {
		i = encodeVarintParticipant(dAtA, i, uint64(m.LastInferenceTime))
		i--
		dAtA[i] = 0x30
	}
	if m.JoinHeight != 0 {
		i = encodeVarintParticipant(dAtA, i, uint64(m.JoinHeight))
		i--
		dAtA[i] = 0x28
	}
	if m.JoinTime != 0 {
		i = encodeVarintParticipant(dAtA, i, uint64(m.JoinTime))
		i--
		dAtA[i] = 0x20
	}
	if m.Weight != 0 {
		i = encodeVarintParticipant(dAtA, i, uint64(m.Weight))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintParticipant(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintParticipant(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintParticipant(dAtA []byte, offset int, v uint64) int {
	offset -= sovParticipant(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Participant) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovParticipant(uint64(l))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovParticipant(uint64(l))
	}
	if m.Weight != 0 {
		n += 1 + sovParticipant(uint64(m.Weight))
	}
	if m.JoinTime != 0 {
		n += 1 + sovParticipant(uint64(m.JoinTime))
	}
	if m.JoinHeight != 0 {
		n += 1 + sovParticipant(uint64(m.JoinHeight))
	}
	if m.LastInferenceTime != 0 {
		n += 1 + sovParticipant(uint64(m.LastInferenceTime))
	}
	l = len(m.InferenceUrl)
	if l > 0 {
		n += 1 + l + sovParticipant(uint64(l))
	}
	if len(m.Models) > 0 {
		for _, s := range m.Models {
			l = len(s)
			n += 1 + l + sovParticipant(uint64(l))
		}
	}
	if m.Status != 0 {
		n += 1 + sovParticipant(uint64(m.Status))
	}
	if m.InferenceCount != 0 {
		n += 1 + sovParticipant(uint64(m.InferenceCount))
	}
	if m.ValidatedInferences != 0 {
		n += 1 + sovParticipant(uint64(m.ValidatedInferences))
	}
	if m.InvalidatedInferences != 0 {
		n += 1 + sovParticipant(uint64(m.InvalidatedInferences))
	}
	if m.CoinBalance != 0 {
		n += 1 + sovParticipant(uint64(m.CoinBalance))
	}
	l = len(m.ValidatorKey)
	if l > 0 {
		n += 1 + l + sovParticipant(uint64(l))
	}
	if m.ConsecutiveInvalidInferences != 0 {
		n += 1 + sovParticipant(uint64(m.ConsecutiveInvalidInferences))
	}
	l = len(m.WorkerPublicKey)
	if l > 0 {
		n += 2 + l + sovParticipant(uint64(l))
	}
	if m.EpochsCompleted != 0 {
		n += 2 + sovParticipant(uint64(m.EpochsCompleted))
	}
	return n
}

func sovParticipant(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozParticipant(x uint64) (n int) {
	return sovParticipant(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Participant) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParticipant
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Participant: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Participant: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParticipant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParticipant
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParticipant
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParticipant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParticipant
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParticipant
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Weight", wireType)
			}
			m.Weight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParticipant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Weight |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field JoinTime", wireType)
			}
			m.JoinTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParticipant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.JoinTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field JoinHeight", wireType)
			}
			m.JoinHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParticipant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.JoinHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastInferenceTime", wireType)
			}
			m.LastInferenceTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParticipant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastInferenceTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InferenceUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParticipant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParticipant
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParticipant
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InferenceUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Models", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParticipant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParticipant
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParticipant
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Models = append(m.Models, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParticipant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= ParticipantStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InferenceCount", wireType)
			}
			m.InferenceCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParticipant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InferenceCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatedInferences", wireType)
			}
			m.ValidatedInferences = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParticipant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ValidatedInferences |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InvalidatedInferences", wireType)
			}
			m.InvalidatedInferences = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParticipant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InvalidatedInferences |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoinBalance", wireType)
			}
			m.CoinBalance = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParticipant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CoinBalance |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParticipant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParticipant
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParticipant
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidatorKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConsecutiveInvalidInferences", wireType)
			}
			m.ConsecutiveInvalidInferences = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParticipant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ConsecutiveInvalidInferences |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkerPublicKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParticipant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParticipant
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParticipant
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WorkerPublicKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochsCompleted", wireType)
			}
			m.EpochsCompleted = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParticipant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EpochsCompleted |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipParticipant(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParticipant
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipParticipant(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowParticipant
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowParticipant
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowParticipant
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthParticipant
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupParticipant
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthParticipant
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthParticipant        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowParticipant          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupParticipant = fmt.Errorf("proto: unexpected end of group")
)
