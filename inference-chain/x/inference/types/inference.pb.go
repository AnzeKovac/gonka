// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: inference/inference/inference.proto

package types

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Inference struct {
	Index                string `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
	InferenceId          string `protobuf:"bytes,2,opt,name=inferenceId,proto3" json:"inferenceId,omitempty"`
	PromptHash           string `protobuf:"bytes,3,opt,name=promptHash,proto3" json:"promptHash,omitempty"`
	PromptPayload        string `protobuf:"bytes,4,opt,name=promptPayload,proto3" json:"promptPayload,omitempty"`
	ResponseHash         string `protobuf:"bytes,5,opt,name=responseHash,proto3" json:"responseHash,omitempty"`
	ResponsePayload      string `protobuf:"bytes,6,opt,name=responsePayload,proto3" json:"responsePayload,omitempty"`
	PromptTokenCount     uint64 `protobuf:"varint,7,opt,name=promptTokenCount,proto3" json:"promptTokenCount,omitempty"`
	CompletionTokenCount uint64 `protobuf:"varint,8,opt,name=completionTokenCount,proto3" json:"completionTokenCount,omitempty"`
	ReceivedBy           string `protobuf:"bytes,9,opt,name=receivedBy,proto3" json:"receivedBy,omitempty"`
	ExecutedBy           string `protobuf:"bytes,10,opt,name=executedBy,proto3" json:"executedBy,omitempty"`
	Status               string `protobuf:"bytes,11,opt,name=status,proto3" json:"status,omitempty"`
	BlockHeight          int64  `protobuf:"varint,12,opt,name=blockHeight,proto3" json:"blockHeight,omitempty"`
}

func (m *Inference) Reset()         { *m = Inference{} }
func (m *Inference) String() string { return proto.CompactTextString(m) }
func (*Inference) ProtoMessage()    {}
func (*Inference) Descriptor() ([]byte, []int) {
	return fileDescriptor_ce060d6da7916311, []int{0}
}
func (m *Inference) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Inference) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Inference.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Inference) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Inference.Merge(m, src)
}
func (m *Inference) XXX_Size() int {
	return m.Size()
}
func (m *Inference) XXX_DiscardUnknown() {
	xxx_messageInfo_Inference.DiscardUnknown(m)
}

var xxx_messageInfo_Inference proto.InternalMessageInfo

func (m *Inference) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

func (m *Inference) GetInferenceId() string {
	if m != nil {
		return m.InferenceId
	}
	return ""
}

func (m *Inference) GetPromptHash() string {
	if m != nil {
		return m.PromptHash
	}
	return ""
}

func (m *Inference) GetPromptPayload() string {
	if m != nil {
		return m.PromptPayload
	}
	return ""
}

func (m *Inference) GetResponseHash() string {
	if m != nil {
		return m.ResponseHash
	}
	return ""
}

func (m *Inference) GetResponsePayload() string {
	if m != nil {
		return m.ResponsePayload
	}
	return ""
}

func (m *Inference) GetPromptTokenCount() uint64 {
	if m != nil {
		return m.PromptTokenCount
	}
	return 0
}

func (m *Inference) GetCompletionTokenCount() uint64 {
	if m != nil {
		return m.CompletionTokenCount
	}
	return 0
}

func (m *Inference) GetReceivedBy() string {
	if m != nil {
		return m.ReceivedBy
	}
	return ""
}

func (m *Inference) GetExecutedBy() string {
	if m != nil {
		return m.ExecutedBy
	}
	return ""
}

func (m *Inference) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *Inference) GetBlockHeight() int64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

func init() {
	proto.RegisterType((*Inference)(nil), "inference.inference.Inference")
}

func init() {
	proto.RegisterFile("inference/inference/inference.proto", fileDescriptor_ce060d6da7916311)
}

var fileDescriptor_ce060d6da7916311 = []byte{
	// 331 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x92, 0xcf, 0x4e, 0x32, 0x31,
	0x14, 0xc5, 0xe9, 0xc7, 0x9f, 0x4f, 0x2e, 0x18, 0x4d, 0x25, 0xa6, 0xab, 0x66, 0x82, 0x2e, 0x26,
	0x2e, 0x20, 0xd1, 0xf8, 0x02, 0xb8, 0x81, 0x95, 0x86, 0xb8, 0x72, 0x37, 0x74, 0xae, 0xd0, 0x00,
	0x6d, 0x33, 0xed, 0x18, 0x78, 0x0b, 0x5f, 0xc5, 0xb7, 0x70, 0xc9, 0xd2, 0xa5, 0x81, 0x17, 0x31,
	0x74, 0x04, 0x06, 0x64, 0x77, 0xcf, 0xef, 0x9c, 0x9e, 0xe4, 0x36, 0x17, 0xae, 0xa4, 0x7a, 0xc5,
	0x04, 0x95, 0xc0, 0xf6, 0x91, 0xa9, 0x65, 0x12, 0xed, 0x34, 0xbd, 0xd8, 0x81, 0xed, 0xd4, 0xfc,
	0x28, 0x42, 0xb5, 0xb7, 0x51, 0xb4, 0x01, 0x65, 0xa9, 0x62, 0x9c, 0x31, 0x12, 0x90, 0xb0, 0xda,
	0xcf, 0x04, 0x0d, 0xa0, 0xb6, 0x7d, 0xd0, 0x8b, 0xd9, 0x3f, 0xef, 0xe5, 0x11, 0xe5, 0x00, 0x26,
	0xd1, 0x53, 0xe3, 0xba, 0x91, 0x1d, 0xb1, 0xa2, 0x0f, 0xe4, 0x08, 0xbd, 0x86, 0xd3, 0x4c, 0x3d,
	0x45, 0xf3, 0x89, 0x8e, 0x62, 0x56, 0xf2, 0x91, 0x7d, 0x48, 0x9b, 0x50, 0x4f, 0xd0, 0x1a, 0xad,
	0x2c, 0xfa, 0x9e, 0xb2, 0x0f, 0xed, 0x31, 0x1a, 0xc2, 0xd9, 0x46, 0x6f, 0xba, 0x2a, 0x3e, 0x76,
	0x88, 0xe9, 0x0d, 0x9c, 0x67, 0xf5, 0xcf, 0x7a, 0x8c, 0xea, 0x41, 0xa7, 0xca, 0xb1, 0xff, 0x01,
	0x09, 0x4b, 0xfd, 0x3f, 0x9c, 0xde, 0x42, 0x43, 0xe8, 0xa9, 0x99, 0xa0, 0x93, 0x5a, 0xe5, 0xf2,
	0x27, 0x3e, 0x7f, 0xd4, 0x5b, 0xef, 0x9c, 0xa0, 0x40, 0xf9, 0x86, 0x71, 0x67, 0xce, 0xaa, 0xd9,
	0xce, 0x3b, 0xb2, 0xf6, 0x71, 0x86, 0x22, 0x75, 0xde, 0x87, 0xcc, 0xdf, 0x11, 0x7a, 0x09, 0x15,
	0xeb, 0x22, 0x97, 0x5a, 0x56, 0xf3, 0xde, 0xaf, 0x5a, 0xff, 0xf6, 0x60, 0xa2, 0xc5, 0xb8, 0x8b,
	0x72, 0x38, 0x72, 0xac, 0x1e, 0x90, 0xb0, 0xd8, 0xcf, 0xa3, 0xce, 0xe3, 0xe7, 0x92, 0x93, 0xc5,
	0x92, 0x93, 0xef, 0x25, 0x27, 0xef, 0x2b, 0x5e, 0x58, 0xac, 0x78, 0xe1, 0x6b, 0xc5, 0x0b, 0x2f,
	0xf7, 0x43, 0xe9, 0x46, 0xe9, 0xa0, 0x25, 0xf4, 0xb4, 0x6d, 0x12, 0x1d, 0xa7, 0xc2, 0x59, 0x21,
	0x0f, 0xee, 0x62, 0x96, 0x9b, 0xdd, 0xdc, 0xa0, 0x1d, 0x54, 0xfc, 0x81, 0xdc, 0xfd, 0x04, 0x00,
	0x00, 0xff, 0xff, 0x48, 0xa0, 0x0a, 0xef, 0x47, 0x02, 0x00, 0x00,
}

func (m *Inference) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Inference) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Inference) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BlockHeight != 0 {
		i = encodeVarintInference(dAtA, i, uint64(m.BlockHeight))
		i--
		dAtA[i] = 0x60
	}
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintInference(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.ExecutedBy) > 0 {
		i -= len(m.ExecutedBy)
		copy(dAtA[i:], m.ExecutedBy)
		i = encodeVarintInference(dAtA, i, uint64(len(m.ExecutedBy)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.ReceivedBy) > 0 {
		i -= len(m.ReceivedBy)
		copy(dAtA[i:], m.ReceivedBy)
		i = encodeVarintInference(dAtA, i, uint64(len(m.ReceivedBy)))
		i--
		dAtA[i] = 0x4a
	}
	if m.CompletionTokenCount != 0 {
		i = encodeVarintInference(dAtA, i, uint64(m.CompletionTokenCount))
		i--
		dAtA[i] = 0x40
	}
	if m.PromptTokenCount != 0 {
		i = encodeVarintInference(dAtA, i, uint64(m.PromptTokenCount))
		i--
		dAtA[i] = 0x38
	}
	if len(m.ResponsePayload) > 0 {
		i -= len(m.ResponsePayload)
		copy(dAtA[i:], m.ResponsePayload)
		i = encodeVarintInference(dAtA, i, uint64(len(m.ResponsePayload)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.ResponseHash) > 0 {
		i -= len(m.ResponseHash)
		copy(dAtA[i:], m.ResponseHash)
		i = encodeVarintInference(dAtA, i, uint64(len(m.ResponseHash)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.PromptPayload) > 0 {
		i -= len(m.PromptPayload)
		copy(dAtA[i:], m.PromptPayload)
		i = encodeVarintInference(dAtA, i, uint64(len(m.PromptPayload)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.PromptHash) > 0 {
		i -= len(m.PromptHash)
		copy(dAtA[i:], m.PromptHash)
		i = encodeVarintInference(dAtA, i, uint64(len(m.PromptHash)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.InferenceId) > 0 {
		i -= len(m.InferenceId)
		copy(dAtA[i:], m.InferenceId)
		i = encodeVarintInference(dAtA, i, uint64(len(m.InferenceId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintInference(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintInference(dAtA []byte, offset int, v uint64) int {
	offset -= sovInference(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Inference) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovInference(uint64(l))
	}
	l = len(m.InferenceId)
	if l > 0 {
		n += 1 + l + sovInference(uint64(l))
	}
	l = len(m.PromptHash)
	if l > 0 {
		n += 1 + l + sovInference(uint64(l))
	}
	l = len(m.PromptPayload)
	if l > 0 {
		n += 1 + l + sovInference(uint64(l))
	}
	l = len(m.ResponseHash)
	if l > 0 {
		n += 1 + l + sovInference(uint64(l))
	}
	l = len(m.ResponsePayload)
	if l > 0 {
		n += 1 + l + sovInference(uint64(l))
	}
	if m.PromptTokenCount != 0 {
		n += 1 + sovInference(uint64(m.PromptTokenCount))
	}
	if m.CompletionTokenCount != 0 {
		n += 1 + sovInference(uint64(m.CompletionTokenCount))
	}
	l = len(m.ReceivedBy)
	if l > 0 {
		n += 1 + l + sovInference(uint64(l))
	}
	l = len(m.ExecutedBy)
	if l > 0 {
		n += 1 + l + sovInference(uint64(l))
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovInference(uint64(l))
	}
	if m.BlockHeight != 0 {
		n += 1 + sovInference(uint64(m.BlockHeight))
	}
	return n
}

func sovInference(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozInference(x uint64) (n int) {
	return sovInference(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Inference) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInference
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Inference: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Inference: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInference
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInference
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInference
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InferenceId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInference
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInference
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInference
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InferenceId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PromptHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInference
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInference
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInference
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PromptHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PromptPayload", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInference
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInference
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInference
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PromptPayload = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResponseHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInference
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInference
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInference
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResponseHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResponsePayload", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInference
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInference
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInference
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResponsePayload = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PromptTokenCount", wireType)
			}
			m.PromptTokenCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInference
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PromptTokenCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompletionTokenCount", wireType)
			}
			m.CompletionTokenCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInference
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CompletionTokenCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReceivedBy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInference
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInference
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInference
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReceivedBy = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExecutedBy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInference
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInference
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInference
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExecutedBy = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInference
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInference
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInference
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInference
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipInference(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthInference
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipInference(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowInference
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowInference
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowInference
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthInference
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupInference
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthInference
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthInference        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowInference          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupInference = fmt.Errorf("proto: unexpected end of group")
)
