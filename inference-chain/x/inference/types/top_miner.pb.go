// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: inference/inference/top_miner.proto

package types

import (
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type TopMiner struct {
	Address              string       `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	LastQualifiedStarted uint64       `protobuf:"varint,2,opt,name=last_qualified_started,json=lastQualifiedStarted,proto3" json:"last_qualified_started,omitempty"`
	RewardsPaidCount     int32        `protobuf:"varint,3,opt,name=rewards_paid_count,json=rewardsPaidCount,proto3" json:"rewards_paid_count,omitempty"`
	RewardsPaid          []types.Coin `protobuf:"bytes,4,rep,name=rewards_paid,json=rewardsPaid,proto3" json:"rewards_paid"`
	QualifiedPeriods     int32        `protobuf:"varint,5,opt,name=qualified_periods,json=qualifiedPeriods,proto3" json:"qualified_periods,omitempty"`
	MissedPeriods        int32        `protobuf:"varint,6,opt,name=missed_periods,json=missedPeriods,proto3" json:"missed_periods,omitempty"`
	QualifiedTime        int32        `protobuf:"varint,7,opt,name=qualified_time,json=qualifiedTime,proto3" json:"qualified_time,omitempty"`
	MissedTime           int32        `protobuf:"varint,8,opt,name=missed_time,json=missedTime,proto3" json:"missed_time,omitempty"`
}

func (m *TopMiner) Reset()         { *m = TopMiner{} }
func (m *TopMiner) String() string { return proto.CompactTextString(m) }
func (*TopMiner) ProtoMessage()    {}
func (*TopMiner) Descriptor() ([]byte, []int) {
	return fileDescriptor_17b2d66b3485f1dd, []int{0}
}
func (m *TopMiner) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TopMiner) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TopMiner.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TopMiner) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TopMiner.Merge(m, src)
}
func (m *TopMiner) XXX_Size() int {
	return m.Size()
}
func (m *TopMiner) XXX_DiscardUnknown() {
	xxx_messageInfo_TopMiner.DiscardUnknown(m)
}

var xxx_messageInfo_TopMiner proto.InternalMessageInfo

func (m *TopMiner) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *TopMiner) GetLastQualifiedStarted() uint64 {
	if m != nil {
		return m.LastQualifiedStarted
	}
	return 0
}

func (m *TopMiner) GetRewardsPaidCount() int32 {
	if m != nil {
		return m.RewardsPaidCount
	}
	return 0
}

func (m *TopMiner) GetRewardsPaid() []types.Coin {
	if m != nil {
		return m.RewardsPaid
	}
	return nil
}

func (m *TopMiner) GetQualifiedPeriods() int32 {
	if m != nil {
		return m.QualifiedPeriods
	}
	return 0
}

func (m *TopMiner) GetMissedPeriods() int32 {
	if m != nil {
		return m.MissedPeriods
	}
	return 0
}

func (m *TopMiner) GetQualifiedTime() int32 {
	if m != nil {
		return m.QualifiedTime
	}
	return 0
}

func (m *TopMiner) GetMissedTime() int32 {
	if m != nil {
		return m.MissedTime
	}
	return 0
}

func init() {
	proto.RegisterType((*TopMiner)(nil), "inference.inference.TopMiner")
}

func init() {
	proto.RegisterFile("inference/inference/top_miner.proto", fileDescriptor_17b2d66b3485f1dd)
}

var fileDescriptor_17b2d66b3485f1dd = []byte{
	// 367 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x92, 0xcb, 0x4e, 0x83, 0x40,
	0x14, 0x86, 0xa1, 0x77, 0xa7, 0x6a, 0x74, 0x6c, 0x0c, 0x76, 0x41, 0x89, 0xc6, 0x84, 0x44, 0x03,
	0xa9, 0x97, 0x17, 0x68, 0xd7, 0xc6, 0x8a, 0x5d, 0xb9, 0x21, 0x03, 0x33, 0xad, 0x93, 0x14, 0x06,
	0x67, 0x06, 0x2f, 0x6f, 0xe1, 0x63, 0x75, 0xd9, 0xa5, 0x2b, 0x63, 0xda, 0x8d, 0x8f, 0x61, 0x60,
	0x5a, 0x4a, 0xdc, 0x1d, 0xfe, 0xef, 0xcb, 0x0f, 0x27, 0x1c, 0x70, 0x46, 0xe3, 0x09, 0xe1, 0x24,
	0x0e, 0x89, 0xbb, 0x9d, 0x24, 0x4b, 0xfc, 0x88, 0xc6, 0x84, 0x3b, 0x09, 0x67, 0x92, 0xc1, 0xa3,
	0x02, 0x39, 0xc5, 0xd4, 0xed, 0x4c, 0xd9, 0x94, 0xe5, 0xdc, 0xcd, 0x26, 0xa5, 0x76, 0xcd, 0x90,
	0x89, 0x88, 0x09, 0x37, 0x40, 0x82, 0xb8, 0xaf, 0xfd, 0x80, 0x48, 0xd4, 0x77, 0x43, 0x46, 0x63,
	0xc5, 0x4f, 0x7f, 0x2b, 0xa0, 0x35, 0x66, 0xc9, 0x5d, 0xd6, 0x0e, 0x0d, 0xd0, 0x44, 0x18, 0x73,
	0x22, 0x84, 0xa1, 0x5b, 0xba, 0xbd, 0xe3, 0x6d, 0x1e, 0xe1, 0x0d, 0x38, 0x9e, 0x21, 0x21, 0xfd,
	0x97, 0x14, 0xcd, 0xe8, 0x84, 0x12, 0xec, 0x0b, 0x89, 0xb8, 0x24, 0xd8, 0xa8, 0x58, 0xba, 0x5d,
	0xf3, 0x3a, 0x19, 0x7d, 0xd8, 0xc0, 0x47, 0xc5, 0xe0, 0x25, 0x80, 0x9c, 0xbc, 0x21, 0x8e, 0x85,
	0x9f, 0x20, 0x8a, 0xfd, 0x90, 0xa5, 0xb1, 0x34, 0xaa, 0x96, 0x6e, 0xd7, 0xbd, 0x83, 0x35, 0x19,
	0x21, 0x8a, 0x87, 0x59, 0x0e, 0x07, 0x60, 0xb7, 0x6c, 0x1b, 0x35, 0xab, 0x6a, 0xb7, 0xaf, 0x4e,
	0x1c, 0xb5, 0x81, 0x93, 0x6d, 0xe0, 0xac, 0x37, 0x70, 0x86, 0x8c, 0xc6, 0x83, 0xda, 0xfc, 0xbb,
	0xa7, 0x79, 0xed, 0x52, 0x11, 0xbc, 0x00, 0x87, 0xdb, 0x4f, 0x4c, 0x08, 0xa7, 0x0c, 0x0b, 0xa3,
	0xae, 0x5e, 0x58, 0x80, 0x91, 0xca, 0xe1, 0x39, 0xd8, 0x8f, 0xa8, 0x10, 0x25, 0xb3, 0x91, 0x9b,
	0x7b, 0x2a, 0x2d, 0x69, 0xdb, 0x4e, 0x49, 0x23, 0x62, 0x34, 0x95, 0x56, 0xa4, 0x63, 0x1a, 0x11,
	0xd8, 0x03, 0xed, 0x75, 0x5b, 0xee, 0xb4, 0x72, 0x07, 0xa8, 0x28, 0x13, 0x06, 0xf7, 0xf3, 0xa5,
	0xa9, 0x2f, 0x96, 0xa6, 0xfe, 0xb3, 0x34, 0xf5, 0xcf, 0x95, 0xa9, 0x2d, 0x56, 0xa6, 0xf6, 0xb5,
	0x32, 0xb5, 0xa7, 0xdb, 0x29, 0x95, 0xcf, 0x69, 0xe0, 0x84, 0x2c, 0x72, 0x13, 0xce, 0x70, 0x1a,
	0x4a, 0x11, 0xd2, 0x7f, 0x47, 0xf0, 0x5e, 0x3e, 0x88, 0x8f, 0x84, 0x88, 0xa0, 0x91, 0xff, 0xc2,
	0xeb, 0xbf, 0x00, 0x00, 0x00, 0xff, 0xff, 0xa4, 0x8e, 0x81, 0x5f, 0x34, 0x02, 0x00, 0x00,
}

func (m *TopMiner) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TopMiner) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TopMiner) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MissedTime != 0 {
		i = encodeVarintTopMiner(dAtA, i, uint64(m.MissedTime))
		i--
		dAtA[i] = 0x40
	}
	if m.QualifiedTime != 0 {
		i = encodeVarintTopMiner(dAtA, i, uint64(m.QualifiedTime))
		i--
		dAtA[i] = 0x38
	}
	if m.MissedPeriods != 0 {
		i = encodeVarintTopMiner(dAtA, i, uint64(m.MissedPeriods))
		i--
		dAtA[i] = 0x30
	}
	if m.QualifiedPeriods != 0 {
		i = encodeVarintTopMiner(dAtA, i, uint64(m.QualifiedPeriods))
		i--
		dAtA[i] = 0x28
	}
	if len(m.RewardsPaid) > 0 {
		for iNdEx := len(m.RewardsPaid) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RewardsPaid[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTopMiner(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if m.RewardsPaidCount != 0 {
		i = encodeVarintTopMiner(dAtA, i, uint64(m.RewardsPaidCount))
		i--
		dAtA[i] = 0x18
	}
	if m.LastQualifiedStarted != 0 {
		i = encodeVarintTopMiner(dAtA, i, uint64(m.LastQualifiedStarted))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintTopMiner(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTopMiner(dAtA []byte, offset int, v uint64) int {
	offset -= sovTopMiner(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *TopMiner) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovTopMiner(uint64(l))
	}
	if m.LastQualifiedStarted != 0 {
		n += 1 + sovTopMiner(uint64(m.LastQualifiedStarted))
	}
	if m.RewardsPaidCount != 0 {
		n += 1 + sovTopMiner(uint64(m.RewardsPaidCount))
	}
	if len(m.RewardsPaid) > 0 {
		for _, e := range m.RewardsPaid {
			l = e.Size()
			n += 1 + l + sovTopMiner(uint64(l))
		}
	}
	if m.QualifiedPeriods != 0 {
		n += 1 + sovTopMiner(uint64(m.QualifiedPeriods))
	}
	if m.MissedPeriods != 0 {
		n += 1 + sovTopMiner(uint64(m.MissedPeriods))
	}
	if m.QualifiedTime != 0 {
		n += 1 + sovTopMiner(uint64(m.QualifiedTime))
	}
	if m.MissedTime != 0 {
		n += 1 + sovTopMiner(uint64(m.MissedTime))
	}
	return n
}

func sovTopMiner(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTopMiner(x uint64) (n int) {
	return sovTopMiner(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *TopMiner) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTopMiner
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TopMiner: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TopMiner: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopMiner
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTopMiner
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTopMiner
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastQualifiedStarted", wireType)
			}
			m.LastQualifiedStarted = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopMiner
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastQualifiedStarted |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardsPaidCount", wireType)
			}
			m.RewardsPaidCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopMiner
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RewardsPaidCount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardsPaid", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopMiner
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTopMiner
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTopMiner
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RewardsPaid = append(m.RewardsPaid, types.Coin{})
			if err := m.RewardsPaid[len(m.RewardsPaid)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field QualifiedPeriods", wireType)
			}
			m.QualifiedPeriods = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopMiner
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.QualifiedPeriods |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MissedPeriods", wireType)
			}
			m.MissedPeriods = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopMiner
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MissedPeriods |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field QualifiedTime", wireType)
			}
			m.QualifiedTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopMiner
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.QualifiedTime |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MissedTime", wireType)
			}
			m.MissedTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopMiner
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MissedTime |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTopMiner(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTopMiner
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTopMiner(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTopMiner
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTopMiner
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTopMiner
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTopMiner
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTopMiner
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTopMiner
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTopMiner        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTopMiner          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTopMiner = fmt.Errorf("proto: unexpected end of group")
)
