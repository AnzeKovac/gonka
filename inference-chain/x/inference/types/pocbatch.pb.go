// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: inference/inference/pocbatch.proto

package types

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type PoCBatch struct {
	ParticipantAddress       string    `protobuf:"bytes,1,opt,name=participantAddress,proto3" json:"participantAddress,omitempty"`
	PocStageStartBlockHeight int64     `protobuf:"varint,2,opt,name=pocStageStartBlockHeight,proto3" json:"pocStageStartBlockHeight,omitempty"`
	ReceivedAtBlockHeight    int64     `protobuf:"varint,3,opt,name=receivedAtBlockHeight,proto3" json:"receivedAtBlockHeight,omitempty"`
	Nonces                   []int64   `protobuf:"varint,4,rep,packed,name=nonces,proto3" json:"nonces,omitempty"`
	Dist                     []float64 `protobuf:"fixed64,5,rep,packed,name=dist,proto3" json:"dist,omitempty"`
}

func (m *PoCBatch) Reset()         { *m = PoCBatch{} }
func (m *PoCBatch) String() string { return proto.CompactTextString(m) }
func (*PoCBatch) ProtoMessage()    {}
func (*PoCBatch) Descriptor() ([]byte, []int) {
	return fileDescriptor_ba47c2fd2ca3ae22, []int{0}
}
func (m *PoCBatch) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PoCBatch) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PoCBatch.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PoCBatch) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PoCBatch.Merge(m, src)
}
func (m *PoCBatch) XXX_Size() int {
	return m.Size()
}
func (m *PoCBatch) XXX_DiscardUnknown() {
	xxx_messageInfo_PoCBatch.DiscardUnknown(m)
}

var xxx_messageInfo_PoCBatch proto.InternalMessageInfo

func (m *PoCBatch) GetParticipantAddress() string {
	if m != nil {
		return m.ParticipantAddress
	}
	return ""
}

func (m *PoCBatch) GetPocStageStartBlockHeight() int64 {
	if m != nil {
		return m.PocStageStartBlockHeight
	}
	return 0
}

func (m *PoCBatch) GetReceivedAtBlockHeight() int64 {
	if m != nil {
		return m.ReceivedAtBlockHeight
	}
	return 0
}

func (m *PoCBatch) GetNonces() []int64 {
	if m != nil {
		return m.Nonces
	}
	return nil
}

func (m *PoCBatch) GetDist() []float64 {
	if m != nil {
		return m.Dist
	}
	return nil
}

func init() {
	proto.RegisterType((*PoCBatch)(nil), "inference.inference.PoCBatch")
}

func init() {
	proto.RegisterFile("inference/inference/pocbatch.proto", fileDescriptor_ba47c2fd2ca3ae22)
}

var fileDescriptor_ba47c2fd2ca3ae22 = []byte{
	// 251 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x90, 0xbf, 0x4e, 0xc3, 0x30,
	0x10, 0x87, 0x63, 0x52, 0x2a, 0xf0, 0x68, 0x04, 0xca, 0x64, 0x45, 0x9d, 0x32, 0xa5, 0x03, 0xb0,
	0xb0, 0x35, 0x2c, 0x6c, 0xa0, 0x74, 0x63, 0x73, 0xce, 0x47, 0x62, 0x01, 0xb6, 0x65, 0x5f, 0x11,
	0xbc, 0x05, 0x8f, 0xc5, 0xd8, 0xb1, 0x23, 0x4a, 0x5e, 0x04, 0x11, 0xa1, 0xf2, 0x47, 0x65, 0xfb,
	0x4e, 0xdf, 0xfd, 0x96, 0x8f, 0xcf, 0x8c, 0xbd, 0xc3, 0x80, 0x16, 0x70, 0xfe, 0x4d, 0xde, 0x41,
	0xa3, 0x08, 0xba, 0xd2, 0x07, 0x47, 0x4e, 0x1c, 0x6d, 0x4d, 0xb9, 0xa5, 0xd9, 0x86, 0xf1, 0x83,
	0x1b, 0x77, 0x59, 0x7d, 0xfe, 0x89, 0x92, 0x0b, 0xaf, 0x02, 0x19, 0x30, 0x5e, 0x59, 0x5a, 0x68,
	0x1d, 0x30, 0xc6, 0x8c, 0xe5, 0xac, 0x38, 0xac, 0x77, 0x18, 0x71, 0xc1, 0x33, 0xef, 0x60, 0x49,
	0xaa, 0xc5, 0x25, 0xa9, 0x40, 0xd5, 0x83, 0x83, 0xfb, 0x2b, 0x34, 0x6d, 0x47, 0xd9, 0x5e, 0xce,
	0x8a, 0xb4, 0xfe, 0xd7, 0x8b, 0x33, 0x7e, 0x1c, 0x10, 0xd0, 0x3c, 0xa1, 0x5e, 0xfc, 0x1a, 0xa6,
	0xe3, 0x70, 0xb7, 0x14, 0x27, 0x7c, 0x6a, 0x9d, 0x05, 0x8c, 0xd9, 0x24, 0x4f, 0x8b, 0xb4, 0xfe,
	0xba, 0x84, 0xe0, 0x13, 0x6d, 0x22, 0x65, 0xfb, 0x79, 0x5a, 0xb0, 0x7a, 0xe4, 0xea, 0xfa, 0xad,
	0x97, 0x6c, 0xdd, 0x4b, 0xf6, 0xde, 0x4b, 0xf6, 0x3a, 0xc8, 0x64, 0x3d, 0xc8, 0x64, 0x33, 0xc8,
	0xe4, 0xf6, 0xbc, 0x35, 0xd4, 0xad, 0x9a, 0x12, 0xdc, 0xe3, 0xdc, 0x07, 0xa7, 0x57, 0x40, 0x11,
	0xcc, 0x9f, 0x7a, 0xcf, 0x3f, 0x98, 0x5e, 0x3c, 0xc6, 0x66, 0x3a, 0x76, 0x3c, 0xfd, 0x08, 0x00,
	0x00, 0xff, 0xff, 0x84, 0x9d, 0xec, 0xfa, 0x6d, 0x01, 0x00, 0x00,
}

func (m *PoCBatch) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PoCBatch) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PoCBatch) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Dist) > 0 {
		for iNdEx := len(m.Dist) - 1; iNdEx >= 0; iNdEx-- {
			f1 := math.Float64bits(float64(m.Dist[iNdEx]))
			i -= 8
			encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(f1))
		}
		i = encodeVarintPocbatch(dAtA, i, uint64(len(m.Dist)*8))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Nonces) > 0 {
		dAtA3 := make([]byte, len(m.Nonces)*10)
		var j2 int
		for _, num1 := range m.Nonces {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA3[j2] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j2++
			}
			dAtA3[j2] = uint8(num)
			j2++
		}
		i -= j2
		copy(dAtA[i:], dAtA3[:j2])
		i = encodeVarintPocbatch(dAtA, i, uint64(j2))
		i--
		dAtA[i] = 0x22
	}
	if m.ReceivedAtBlockHeight != 0 {
		i = encodeVarintPocbatch(dAtA, i, uint64(m.ReceivedAtBlockHeight))
		i--
		dAtA[i] = 0x18
	}
	if m.PocStageStartBlockHeight != 0 {
		i = encodeVarintPocbatch(dAtA, i, uint64(m.PocStageStartBlockHeight))
		i--
		dAtA[i] = 0x10
	}
	if len(m.ParticipantAddress) > 0 {
		i -= len(m.ParticipantAddress)
		copy(dAtA[i:], m.ParticipantAddress)
		i = encodeVarintPocbatch(dAtA, i, uint64(len(m.ParticipantAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintPocbatch(dAtA []byte, offset int, v uint64) int {
	offset -= sovPocbatch(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *PoCBatch) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ParticipantAddress)
	if l > 0 {
		n += 1 + l + sovPocbatch(uint64(l))
	}
	if m.PocStageStartBlockHeight != 0 {
		n += 1 + sovPocbatch(uint64(m.PocStageStartBlockHeight))
	}
	if m.ReceivedAtBlockHeight != 0 {
		n += 1 + sovPocbatch(uint64(m.ReceivedAtBlockHeight))
	}
	if len(m.Nonces) > 0 {
		l = 0
		for _, e := range m.Nonces {
			l += sovPocbatch(uint64(e))
		}
		n += 1 + sovPocbatch(uint64(l)) + l
	}
	if len(m.Dist) > 0 {
		n += 1 + sovPocbatch(uint64(len(m.Dist)*8)) + len(m.Dist)*8
	}
	return n
}

func sovPocbatch(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPocbatch(x uint64) (n int) {
	return sovPocbatch(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *PoCBatch) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPocbatch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PoCBatch: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PoCBatch: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParticipantAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPocbatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPocbatch
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPocbatch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ParticipantAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PocStageStartBlockHeight", wireType)
			}
			m.PocStageStartBlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPocbatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PocStageStartBlockHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReceivedAtBlockHeight", wireType)
			}
			m.ReceivedAtBlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPocbatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReceivedAtBlockHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPocbatch
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Nonces = append(m.Nonces, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPocbatch
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthPocbatch
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthPocbatch
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Nonces) == 0 {
					m.Nonces = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPocbatch
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Nonces = append(m.Nonces, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonces", wireType)
			}
		case 5:
			if wireType == 1 {
				var v uint64
				if (iNdEx + 8) > l {
					return io.ErrUnexpectedEOF
				}
				v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
				iNdEx += 8
				v2 := float64(math.Float64frombits(v))
				m.Dist = append(m.Dist, v2)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPocbatch
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthPocbatch
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthPocbatch
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				elementCount = packedLen / 8
				if elementCount != 0 && len(m.Dist) == 0 {
					m.Dist = make([]float64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					if (iNdEx + 8) > l {
						return io.ErrUnexpectedEOF
					}
					v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
					iNdEx += 8
					v2 := float64(math.Float64frombits(v))
					m.Dist = append(m.Dist, v2)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Dist", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPocbatch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPocbatch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPocbatch(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPocbatch
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPocbatch
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPocbatch
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPocbatch
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPocbatch
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPocbatch
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPocbatch        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPocbatch          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPocbatch = fmt.Errorf("proto: unexpected end of group")
)
