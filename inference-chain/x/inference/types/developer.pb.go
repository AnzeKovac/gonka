// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: inference/inference/developer.proto

package types

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type DeveloperStatsByEpoch struct {
	EpochId    uint64                     `protobuf:"varint,1,opt,name=epoch_id,json=epochId,proto3" json:"epoch_id,omitempty"`
	Inferences map[string]*InferenceStats `protobuf:"bytes,2,rep,name=inferences,proto3" json:"inferences,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *DeveloperStatsByEpoch) Reset()         { *m = DeveloperStatsByEpoch{} }
func (m *DeveloperStatsByEpoch) String() string { return proto.CompactTextString(m) }
func (*DeveloperStatsByEpoch) ProtoMessage()    {}
func (*DeveloperStatsByEpoch) Descriptor() ([]byte, []int) {
	return fileDescriptor_e800cc91bf31a770, []int{0}
}
func (m *DeveloperStatsByEpoch) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeveloperStatsByEpoch) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeveloperStatsByEpoch.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeveloperStatsByEpoch) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeveloperStatsByEpoch.Merge(m, src)
}
func (m *DeveloperStatsByEpoch) XXX_Size() int {
	return m.Size()
}
func (m *DeveloperStatsByEpoch) XXX_DiscardUnknown() {
	xxx_messageInfo_DeveloperStatsByEpoch.DiscardUnknown(m)
}

var xxx_messageInfo_DeveloperStatsByEpoch proto.InternalMessageInfo

func (m *DeveloperStatsByEpoch) GetEpochId() uint64 {
	if m != nil {
		return m.EpochId
	}
	return 0
}

func (m *DeveloperStatsByEpoch) GetInferences() map[string]*InferenceStats {
	if m != nil {
		return m.Inferences
	}
	return nil
}

type InferenceStats struct {
	Status       InferenceStatus `protobuf:"varint,1,opt,name=status,proto3,enum=inference.inference.InferenceStatus" json:"status,omitempty"`
	AiTokensUsed uint64          `protobuf:"varint,2,opt,name=ai_tokens_used,json=aiTokensUsed,proto3" json:"ai_tokens_used,omitempty"`
}

func (m *InferenceStats) Reset()         { *m = InferenceStats{} }
func (m *InferenceStats) String() string { return proto.CompactTextString(m) }
func (*InferenceStats) ProtoMessage()    {}
func (*InferenceStats) Descriptor() ([]byte, []int) {
	return fileDescriptor_e800cc91bf31a770, []int{1}
}
func (m *InferenceStats) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InferenceStats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InferenceStats.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InferenceStats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InferenceStats.Merge(m, src)
}
func (m *InferenceStats) XXX_Size() int {
	return m.Size()
}
func (m *InferenceStats) XXX_DiscardUnknown() {
	xxx_messageInfo_InferenceStats.DiscardUnknown(m)
}

var xxx_messageInfo_InferenceStats proto.InternalMessageInfo

func (m *InferenceStats) GetStatus() InferenceStatus {
	if m != nil {
		return m.Status
	}
	return InferenceStatus_STARTED
}

func (m *InferenceStats) GetAiTokensUsed() uint64 {
	if m != nil {
		return m.AiTokensUsed
	}
	return 0
}

type DeveloperStatsByTime struct {
	EpochId   uint64          `protobuf:"varint,1,opt,name=epoch_id,json=epochId,proto3" json:"epoch_id,omitempty"`
	Timestamp int64           `protobuf:"varint,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Inference *InferenceStats `protobuf:"bytes,3,opt,name=inference,proto3" json:"inference,omitempty"`
}

func (m *DeveloperStatsByTime) Reset()         { *m = DeveloperStatsByTime{} }
func (m *DeveloperStatsByTime) String() string { return proto.CompactTextString(m) }
func (*DeveloperStatsByTime) ProtoMessage()    {}
func (*DeveloperStatsByTime) Descriptor() ([]byte, []int) {
	return fileDescriptor_e800cc91bf31a770, []int{2}
}
func (m *DeveloperStatsByTime) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeveloperStatsByTime) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeveloperStatsByTime.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeveloperStatsByTime) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeveloperStatsByTime.Merge(m, src)
}
func (m *DeveloperStatsByTime) XXX_Size() int {
	return m.Size()
}
func (m *DeveloperStatsByTime) XXX_DiscardUnknown() {
	xxx_messageInfo_DeveloperStatsByTime.DiscardUnknown(m)
}

var xxx_messageInfo_DeveloperStatsByTime proto.InternalMessageInfo

func (m *DeveloperStatsByTime) GetEpochId() uint64 {
	if m != nil {
		return m.EpochId
	}
	return 0
}

func (m *DeveloperStatsByTime) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *DeveloperStatsByTime) GetInference() *InferenceStats {
	if m != nil {
		return m.Inference
	}
	return nil
}

func init() {
	proto.RegisterType((*DeveloperStatsByEpoch)(nil), "inference.inference.DeveloperStatsByEpoch")
	proto.RegisterMapType((map[string]*InferenceStats)(nil), "inference.inference.DeveloperStatsByEpoch.InferencesEntry")
	proto.RegisterType((*InferenceStats)(nil), "inference.inference.InferenceStats")
	proto.RegisterType((*DeveloperStatsByTime)(nil), "inference.inference.DeveloperStatsByTime")
}

func init() {
	proto.RegisterFile("inference/inference/developer.proto", fileDescriptor_e800cc91bf31a770)
}

var fileDescriptor_e800cc91bf31a770 = []byte{
	// 359 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x92, 0xcf, 0x4e, 0xc2, 0x40,
	0x10, 0xc6, 0x59, 0x8a, 0x28, 0x83, 0x41, 0xb3, 0x6a, 0x52, 0x89, 0x69, 0x08, 0x70, 0xe0, 0x54,
	0x12, 0x8c, 0x89, 0x12, 0x2f, 0x12, 0x39, 0x70, 0x32, 0xa9, 0x78, 0xe1, 0x42, 0x4a, 0x3b, 0xca,
	0x06, 0xfa, 0x27, 0xdd, 0x2d, 0xb1, 0x6f, 0x61, 0x7c, 0x2a, 0x8f, 0x1c, 0x3d, 0x1a, 0x78, 0x03,
	0x9f, 0xc0, 0xb0, 0x6a, 0x8b, 0xa4, 0x51, 0x6f, 0xdf, 0xce, 0xec, 0xf7, 0x9b, 0x2f, 0x93, 0x81,
	0x1a, 0x73, 0xef, 0x31, 0x40, 0xd7, 0xc2, 0x66, 0xa2, 0x6c, 0x9c, 0xe1, 0xd4, 0xf3, 0x31, 0xd0,
	0xfd, 0xc0, 0x13, 0x1e, 0x3d, 0x88, 0x5b, 0x7a, 0xac, 0xca, 0xa9, 0xce, 0xe4, 0xa3, 0x74, 0x56,
	0xdf, 0x09, 0x1c, 0x5d, 0x7f, 0xd3, 0x6e, 0x85, 0x29, 0x78, 0x27, 0xea, 0xfa, 0x9e, 0x35, 0xa6,
	0xc7, 0xb0, 0x83, 0x2b, 0x31, 0x64, 0xb6, 0x4a, 0x2a, 0xa4, 0x91, 0x33, 0xb6, 0xe5, 0xbb, 0x67,
	0xd3, 0x01, 0x40, 0xcc, 0xe1, 0x6a, 0xb6, 0xa2, 0x34, 0x8a, 0xad, 0xb6, 0x9e, 0x92, 0x41, 0x4f,
	0x45, 0xeb, 0xbd, 0xd8, 0xdc, 0x75, 0x45, 0x10, 0x19, 0x6b, 0xb4, 0xf2, 0x08, 0xf6, 0x36, 0xda,
	0x74, 0x1f, 0x94, 0x09, 0x46, 0x32, 0x44, 0xc1, 0x58, 0x49, 0x7a, 0x01, 0x5b, 0x33, 0x73, 0x1a,
	0xa2, 0x9a, 0xad, 0x90, 0x46, 0xb1, 0x55, 0x4b, 0x9d, 0x1d, 0x63, 0xe4, 0x6c, 0xe3, 0xd3, 0xd1,
	0xce, 0x9e, 0x93, 0xaa, 0x80, 0xd2, 0xcf, 0x26, 0xbd, 0x84, 0x3c, 0x17, 0xa6, 0x08, 0xb9, 0x9c,
	0x52, 0x6a, 0xd5, 0xff, 0x26, 0x86, 0xdc, 0xf8, 0xf2, 0xd0, 0x3a, 0x94, 0x4c, 0x36, 0x14, 0xde,
	0x04, 0x5d, 0x3e, 0x0c, 0x39, 0xda, 0x32, 0x57, 0xce, 0xd8, 0x35, 0x59, 0x5f, 0x16, 0xef, 0x38,
	0xda, 0xd5, 0x67, 0x02, 0x87, 0x9b, 0xfb, 0xe8, 0x33, 0x07, 0x7f, 0xdb, 0xf4, 0x09, 0x14, 0x04,
	0x73, 0x90, 0x0b, 0xd3, 0xf1, 0x25, 0x54, 0x31, 0x92, 0x02, 0xbd, 0x82, 0x42, 0x1c, 0x4e, 0x55,
	0xfe, 0xbf, 0x8a, 0xc4, 0xd5, 0xb9, 0x79, 0x59, 0x68, 0x64, 0xbe, 0xd0, 0xc8, 0xdb, 0x42, 0x23,
	0x4f, 0x4b, 0x2d, 0x33, 0x5f, 0x6a, 0x99, 0xd7, 0xa5, 0x96, 0x19, 0x9c, 0x3d, 0x30, 0x31, 0x0e,
	0x47, 0xba, 0xe5, 0x39, 0x4d, 0x3f, 0xf0, 0xec, 0xd0, 0x12, 0xdc, 0x62, 0x1b, 0xe7, 0xf4, 0xb8,
	0xa6, 0x45, 0xe4, 0x23, 0x1f, 0xe5, 0xe5, 0x5d, 0x9d, 0x7e, 0x04, 0x00, 0x00, 0xff, 0xff, 0xb7,
	0x7a, 0x57, 0x88, 0xb8, 0x02, 0x00, 0x00,
}

func (m *DeveloperStatsByEpoch) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeveloperStatsByEpoch) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeveloperStatsByEpoch) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Inferences) > 0 {
		for k := range m.Inferences {
			v := m.Inferences[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintDeveloper(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintDeveloper(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintDeveloper(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.EpochId != 0 {
		i = encodeVarintDeveloper(dAtA, i, uint64(m.EpochId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *InferenceStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InferenceStats) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InferenceStats) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AiTokensUsed != 0 {
		i = encodeVarintDeveloper(dAtA, i, uint64(m.AiTokensUsed))
		i--
		dAtA[i] = 0x10
	}
	if m.Status != 0 {
		i = encodeVarintDeveloper(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DeveloperStatsByTime) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeveloperStatsByTime) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeveloperStatsByTime) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Inference != nil {
		{
			size, err := m.Inference.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDeveloper(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Timestamp != 0 {
		i = encodeVarintDeveloper(dAtA, i, uint64(m.Timestamp))
		i--
		dAtA[i] = 0x10
	}
	if m.EpochId != 0 {
		i = encodeVarintDeveloper(dAtA, i, uint64(m.EpochId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintDeveloper(dAtA []byte, offset int, v uint64) int {
	offset -= sovDeveloper(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *DeveloperStatsByEpoch) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EpochId != 0 {
		n += 1 + sovDeveloper(uint64(m.EpochId))
	}
	if len(m.Inferences) > 0 {
		for k, v := range m.Inferences {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovDeveloper(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovDeveloper(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovDeveloper(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *InferenceStats) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != 0 {
		n += 1 + sovDeveloper(uint64(m.Status))
	}
	if m.AiTokensUsed != 0 {
		n += 1 + sovDeveloper(uint64(m.AiTokensUsed))
	}
	return n
}

func (m *DeveloperStatsByTime) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EpochId != 0 {
		n += 1 + sovDeveloper(uint64(m.EpochId))
	}
	if m.Timestamp != 0 {
		n += 1 + sovDeveloper(uint64(m.Timestamp))
	}
	if m.Inference != nil {
		l = m.Inference.Size()
		n += 1 + l + sovDeveloper(uint64(l))
	}
	return n
}

func sovDeveloper(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozDeveloper(x uint64) (n int) {
	return sovDeveloper(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *DeveloperStatsByEpoch) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDeveloper
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeveloperStatsByEpoch: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeveloperStatsByEpoch: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochId", wireType)
			}
			m.EpochId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeveloper
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EpochId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Inferences", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeveloper
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDeveloper
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDeveloper
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Inferences == nil {
				m.Inferences = make(map[string]*InferenceStats)
			}
			var mapkey string
			var mapvalue *InferenceStats
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDeveloper
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowDeveloper
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthDeveloper
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthDeveloper
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowDeveloper
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthDeveloper
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthDeveloper
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &InferenceStats{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipDeveloper(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthDeveloper
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Inferences[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDeveloper(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDeveloper
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InferenceStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDeveloper
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InferenceStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InferenceStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeveloper
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= InferenceStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AiTokensUsed", wireType)
			}
			m.AiTokensUsed = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeveloper
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AiTokensUsed |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDeveloper(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDeveloper
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeveloperStatsByTime) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDeveloper
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeveloperStatsByTime: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeveloperStatsByTime: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochId", wireType)
			}
			m.EpochId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeveloper
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EpochId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeveloper
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Inference", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeveloper
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDeveloper
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDeveloper
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Inference == nil {
				m.Inference = &InferenceStats{}
			}
			if err := m.Inference.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDeveloper(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDeveloper
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDeveloper(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDeveloper
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDeveloper
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDeveloper
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthDeveloper
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupDeveloper
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthDeveloper
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthDeveloper        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDeveloper          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupDeveloper = fmt.Errorf("proto: unexpected end of group")
)
