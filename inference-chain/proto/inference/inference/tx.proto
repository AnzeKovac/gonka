syntax = "proto3";

package inference.inference;

import "amino/amino.proto";
import "cosmos/msg/v1/msg.proto";
import "cosmos_proto/cosmos.proto";
import "gogoproto/gogo.proto";
import "google/protobuf/any.proto";
import "inference/inference/params.proto";

option go_package = "github.com/productscience/inference/x/inference/types";

// Msg defines the Msg service.
service Msg {
  option (cosmos.msg.v1.service) = true;
  
  // UpdateParams defines a (governance) operation for updating the module
  // parameters. The authority defaults to the x/gov module account.
  rpc UpdateParams                 (MsgUpdateParams                ) returns (MsgUpdateParamsResponse                );
  rpc StartInference               (MsgStartInference              ) returns (MsgStartInferenceResponse              );
  rpc FinishInference              (MsgFinishInference             ) returns (MsgFinishInferenceResponse             );
  rpc SubmitNewParticipant         (MsgSubmitNewParticipant        ) returns (MsgSubmitNewParticipantResponse        );
  rpc Validation                   (MsgValidation                  ) returns (MsgValidationResponse                  );
  rpc SubmitPoC                    (MsgSubmitPoC                   ) returns (MsgSubmitPoCResponse                   );
  rpc SubmitNewUnfundedParticipant (MsgSubmitNewUnfundedParticipant) returns (MsgSubmitNewUnfundedParticipantResponse);
  rpc InvalidateInference          (MsgInvalidateInference         ) returns (MsgInvalidateInferenceResponse         );
  rpc RevalidateInference          (MsgRevalidateInference         ) returns (MsgRevalidateInferenceResponse         );
  rpc SubmitPocBatch               (MsgSubmitPocBatch              ) returns (MsgSubmitPocBatchResponse              );
  rpc SubmitPocValidation          (MsgSubmitPocValidation         ) returns (MsgSubmitPocValidationResponse         );
}
// MsgUpdateParams is the Msg/UpdateParams request type.
message MsgUpdateParams {
  option (cosmos.msg.v1.signer) =                             "authority";
  option           (amino.name) = "inference/x/inference/MsgUpdateParams";
  
  // authority is the address that controls the module (defaults to x/gov unless overwritten).
  string authority = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  // params defines the module parameters to update.
  
  // NOTE: All parameters must be supplied.
  Params params = 2 [(gogoproto.nullable) = false, (amino.dont_omitempty) = true];
}

// MsgUpdateParamsResponse defines the response structure for executing a
// MsgUpdateParams message.
message MsgUpdateParamsResponse {}

message MsgStartInference {
  option (cosmos.msg.v1.signer) = "creator";
  string creator       = 1;
  string inferenceId   = 2;
  string promptHash    = 3;
  string promptPayload = 4;
  string model         = 6;
  string requestedBy   = 7;
}

message MsgStartInferenceResponse {
  string inferenceIndex = 1;
}

message MsgFinishInference {
  option (cosmos.msg.v1.signer) = "creator";
  string creator              = 1;
  string inferenceId          = 2;
  string responseHash         = 3;
  string responsePayload      = 4;
  uint64 promptTokenCount     = 5;
  uint64 completionTokenCount = 6;
  string executedBy           = 7;
}

message MsgFinishInferenceResponse {
  string inferenceIndex = 1;
}

message MsgSubmitNewParticipant {
  option (cosmos.msg.v1.signer) = "creator";
           string creator      = 1;
           string url          = 2;
  repeated string models       = 3;
           string validatorKey = 4;
}

message MsgSubmitNewParticipantResponse {
  string participantIndex = 1;
  string status           = 2;
}

message MsgValidation {
  option (cosmos.msg.v1.signer) = "creator";
  string creator         = 1;
  string id              = 2;
  string inferenceId     = 3;
  string responsePayload = 4;
  string responseHash    = 5;
  double value           = 6;
  bool   revalidation    = 7;
}

message MsgValidationResponse {}

message MsgSubmitPoC {
  option (cosmos.msg.v1.signer) = "creator";
           string creator     = 1;
           int64  blockHeight = 2;
  repeated string nonce       = 3;
}

message MsgSubmitPoCResponse {}

message MsgSubmitNewUnfundedParticipant {
  option (cosmos.msg.v1.signer) = "creator";
           string creator      = 1;
           string address      = 2;
           string url          = 3;
  repeated string models       = 4;
           string pubKey       = 5;
           string validatorKey = 6;
}

message MsgSubmitNewUnfundedParticipantResponse {}

message MsgInvalidateInference {
  option (cosmos.msg.v1.signer) = "creator";
  string creator     = 1;
  string inferenceId = 2;
}

message MsgInvalidateInferenceResponse {}

message MsgRevalidateInference {
  option (cosmos.msg.v1.signer) = "creator";
  string creator     = 1;
  string inferenceId = 2;
}

message MsgRevalidateInferenceResponse {}

message MsgSubmitPocBatch {
  option (cosmos.msg.v1.signer) = "creator";
           string creator                  = 1;
           int64  pocStageStartBlockHeight = 2;
  repeated int64  nonces                   = 3;
  repeated double dist                     = 4;
}

message MsgSubmitPocBatchResponse {}

message MsgSubmitPocValidation {
  option (cosmos.msg.v1.signer) = "creator";
           string creator                  =  1;
           string participantAddress       =  2;
           int32  pocStageStartBlockHeight =  3;
  repeated int32  nonces                   =  4;
  repeated int32  dist                     =  5;
  repeated int32  receivedDist             =  6;
           int32  rTarget                  =  7;
           int32  fraudThreshold           =  8;
           int32  nInvalid                 =  9;
           int32  probabilityHonest        = 10;
           bool   fraudDetected            = 11;
}

message MsgSubmitPocValidationResponse {}

